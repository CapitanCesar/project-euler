package com.example.demo.business;

import java.math.BigInteger;
import java.util.HashSet;

import com.example.demo.records.Euler;

public class Euler29 {
	public static Euler main() {
		return main(false);
	}

	public static Euler main(boolean isTest) {
		String problem = "<p>Consider all integer combinations of $a^b$ for $2 \\le a \\le 5$ and $2 \\le b \\le 5$:</p>\r\n"
				+ "\\begin{matrix}\r\n" + "2^2=4, &amp;2^3=8, &amp;2^4=16, &amp;2^5=32\\\\\r\n"
				+ "3^2=9, &amp;3^3=27, &amp;3^4=81, &amp;3^5=243\\\\\r\n"
				+ "4^2=16, &amp;4^3=64, &amp;4^4=256, &amp;4^5=1024\\\\\r\n"
				+ "5^2=25, &amp;5^3=125, &amp;5^4=625, &amp;5^5=3125\r\n" + "\\end{matrix}\r\n"
				+ "<p>If they are then placed in numerical order, with any repeats removed, we get the following sequence of $15$ distinct terms:\r\n"
				+ "$$4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125.$$</p>\r\n"
				+ "<p>How many distinct terms are in the sequence generated by $a^b$ for $2 \\le a \\le 100$ and $2 \\le b \\le 100$?</p>";
//		System.out.println(problem);
		String solution;

		if (isTest) {
			solution = solveProblem(5);
		} else {
			solution = solveProblem(100);
		}

		return new Euler(problem, solution);
	}

	/**
	 * @param primes
	 */
	private static String solveProblem(int limit) {
		HashSet<BigInteger> powers = new HashSet<>();
		BigInteger base;
		for (int a = 2; a <= limit; a++) {
			for (int b = 2; b <= limit; b++) {
				base = new BigInteger(String.valueOf(a));
				powers.add(base.pow(b));
			}
		}

		String solution = String.valueOf(powers.size());
		return solution;
	}
}
