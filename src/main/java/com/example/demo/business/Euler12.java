package com.example.demo.business;

import com.example.demo.records.Euler;

public class Euler12 {
	public static Euler main() {
		return main(false);
	}

	public static Euler main(boolean isTest) {
		String problem = "<p>The sequence of triangle numbers is generated by adding the natural numbers. So the $7$<sup>th</sup> triangle number would be $1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:\r\n"
				+ "$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, \\dots$$</p>\r\n"
				+ "<p>Let us list the factors of the first seven triangle numbers:</p>\r\n" + "\\begin{align}\r\n"
				+ "\\mathbf 1 &amp;\\colon 1\\\\\r\n" + "\\mathbf 3 &amp;\\colon 1,3\\\\\r\n"
				+ "\\mathbf 6 &amp;\\colon 1,2,3,6\\\\\r\n" + "\\mathbf{10} &amp;\\colon 1,2,5,10\\\\\r\n"
				+ "\\mathbf{15} &amp;\\colon 1,3,5,15\\\\\r\n" + "\\mathbf{21} &amp;\\colon 1,3,7,21\\\\\r\n"
				+ "\\mathbf{28} &amp;\\colon 1,2,4,7,14,28\r\n" + "\\end{align}\r\n"
				+ "<p>We can see that $28$ is the first triangle number to have over five divisors.</p>\r\n"
				+ "<p>What is the value of the first triangle number to have over five hundred divisors?</p>";
//		System.out.println(problem);
		String solution;

		if (isTest) {
			solution = solveProblem(5);
		} else {
			solution = solveProblem(500);
		}

		return new Euler(problem, solution);
	}

	/**
	 * @param primes
	 */
	private static String solveProblem(int limit) {
		int currentDivisors = 0, currentNaturalNumber = 6350;
		long currentTriangleNumber = 0L;

		boolean found = false;
		while (!found) {
			// Compute the current triangle number as the sum of natural numbers
			currentTriangleNumber = (long) (Math.round(1 + currentNaturalNumber) * (currentNaturalNumber / 2.0));

			currentDivisors = 0;
	        // Loop from 1 to sqrt(n)
	        for (int i = 1; i * i <= currentTriangleNumber; i++) {
	            if (currentTriangleNumber % i == 0) {
	                if (i == currentTriangleNumber / i) {
	                    // If both divisors are the same (i.e., sqrt(n)), count it once
	                	currentDivisors++;
	                } else {
	                    // Count both divisors: i and n/i
	                	currentDivisors += 2;
	                }
	            }
	        }
			System.out.printf("The number %d is the sum of natural numbers up to %d, and has %d divisors\n*****\n",
					currentTriangleNumber, currentNaturalNumber, currentDivisors);

			if (currentDivisors < limit) {
				currentNaturalNumber++;
			} else {
				found = true;
			}
		}

		// Print the triangle number that has at least [limit] divisors
		String solution = String.valueOf(currentTriangleNumber);
		System.out.printf("The number %d has %d divisors\n-----\n", currentTriangleNumber, currentDivisors);

		return solution;
	}
}
